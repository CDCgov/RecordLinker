name: unit tests check

on:
  push:
    branches: [main]
  pull_request:
    branches: [main]

jobs:
  test:
    runs-on: ubuntu-latest

    strategy:
      matrix:
        database: [postgres, sqlite, mysql, sqlserver]  # Matrix for database types

    services:
      postgres:
        image: postgres:latest
        ports:
          - 5432:5432
        env:
          POSTGRES_PASSWORD: pw

      mysql:
        image: mysql:latest
        ports:
          - 3306:3306
        env:
          MYSQL_ROOT_PASSWORD: pw
          MYSQL_DATABASE: test_db

      sqlserver:
        image: mcr.microsoft.com/mssql/server:2019-latest
        ports:
          - 1433:1433
        env:
          ACCEPT_EULA: Y
          SA_PASSWORD: "YourStrong!Passw0rd"

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'
          cache: 'pip'

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install '.[dev]'

      - name: Install ODBC Driver for SQL Server
        run: |
          # Add Microsoft repository keys
          curl https://packages.microsoft.com/keys/microsoft.asc | apt-key add -
          # Add the Microsoft SQL Server repository for Ubuntu
          curl https://packages.microsoft.com/config/ubuntu/$(lsb_release -rs)/prod.list > /etc/apt/sources.list.d/mssql-release.list
          # Update package lists
          sudo apt-get update
          # Accept the EULA and install msodbcsql17
          sudo ACCEPT_EULA=Y apt-get install -y msodbcsql17 unixodbc-dev

      #- name: Wait for database services to be ready
        #run: |
          #if [[ "${{ matrix.database }}" == "postgres" ]]; then
            #until pg_isready -h localhost -U postgres; do echo "Waiting for postgres..."; sleep 1; done
          #elif [[ "${{ matrix.database }}" == "mysql" ]]; then
            #until mysqladmin ping -h localhost -u root -ppw --silent; do echo "Waiting for mysql..."; sleep 1; done
          #elif [[ "${{ matrix.database }}" == "sqlserver" ]]; then
            #until curl -s http://localhost:1433 > /dev/null; do echo "Waiting for sqlserver..."; sleep 1; done
          #fi

      - name: Run Pytest with the matrix database
        run: |
          if [[ "${{ matrix.database }}" == "postgres" ]]; then
            export TEST_DB_URI=postgresql+psycopg2://postgres:pw@localhost:5432/postgres
          elif [[ "${{ matrix.database }}" == "sqlite" ]]; then
            export TEST_DB_URI=sqlite:///testdb.sqlite3
          elif [[ "${{ matrix.database }}" == "mysql" ]]; then
            export TEST_DB_URI=mysql+pymysql://root:mysql@localhost:3306/test_db
          elif [[ "${{ matrix.database }}" == "sqlserver" ]]; then
            export TEST_DB_URI=mssql+pyodbc://sa:YourStrong!Passw0rd@localhost:1433/test_db?driver=ODBC+Driver+17+for+SQL+Server
          fi

          pytest --cov=recordlinker --cov-report=xml tests/unit

      - name: Upload test results to Codecov
        if: ${{ matrix.database == 'postgres' && !cancelled() }}
        uses: codecov/test-results-action@v1
        with:
          token: ${{ secrets.CODECOV_TOKEN }}

      - name: Upload coverage to Codecov
        if: ${{ matrix.database == 'postgres' }}
        uses: codecov/codecov-action@v4
        with:
          token: ${{ secrets.CODECOV_TOKEN }}
          verbose: true
