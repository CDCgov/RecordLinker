name: Build and Cache Images Workflow

on:
  push:
    branches: [main]
  pull_request:
    branches: [main]

jobs:
  build-and-push:
    name: build and push images used in smokes tests to GHCR
    runs-on: ubuntu-latest
    steps:
    - name: Check out repository
      uses: actions/checkout@v4

    - name: Log in to GitHub Container Registry
      uses: docker/login-action@v3
      with:
        registry: ghcr.io
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}

    - name: Convert repository name to lowercase
      run: echo "REPO=$(echo '${{ github.repository }}' | tr '[:upper:]' '[:lower:]')" >> $GITHUB_ENV

    - name: Build & Push Database Images
      run: |
        docker pull postgres:17
        docker tag postgres:17 ghcr.io/${{ env.REPO }}/postgres:17
        docker push ghcr.io/${{ env.REPO }}/postgres:17

        docker pull mysql:8
        docker tag mysql:8 ghcr.io/${{ env.REPO }}/mysql:8
        docker push ghcr.io/${{ env.REPO }}/mysql:8

        docker pull mcr.microsoft.com/mssql/server:2022-latest
        docker tag mcr.microsoft.com/mssql/server:2022-latest ghcr.io/${{ env.REPO }}/sqlserver:2022-latest
        docker push ghcr.io/${{ env.REPO }}/sqlserver:2022-latest

    - name: Check if RecordLinker image exists in GHCR
      id: check_rl_image
      run: |
          docker pull ghcr.io/${{ env.REPO }}/rl-service:latest || echo "No cached image found"
      
    - name: Build and push RecordLinker Docker image if not cached
      if: steps.check_rl_image.outcome == 'failure'
      run: |
        # Build the Docker image, tag it, & push to ghcr
        echo "Building and pushing RecordLinker Docker image..."
        docker build -t rl-service-image .
        docker tag rl-service-image ghcr.io/${{ env.REPO }}/rl-service:latest
        docker push ghcr.io/${{ env.REPO }}/rl-service:latest

  smoke-tests:
    name: Run smoke tests
    runs-on: ubuntu-latest
    needs: build-and-push

    strategy:
      matrix:
        database: [postgres, sqlite, mysql, sqlserver]
    
    services:
      postgres:
        image: postgres:17.4
        ports:
          - 5432:5432
        env:
          POSTGRES_PASSWORD: pw

      mysql:
        image: mysql:8
        ports:
          - 3306:3306
        env:
          MYSQL_ROOT_PASSWORD: pw

      sqlserver:
        image: sqlserver:2022-latest
          - 1433:1433
        env:
          ACCEPT_EULA: Y
          SA_PASSWORD: "YourStrong!Passw0rd"


    steps:
    - name: Convert repository name to lowercase
      run: echo "REPO=$(echo '${{ github.repository }}' | tr '[:upper:]' '[:lower:]')" >> $GITHUB_ENV

  