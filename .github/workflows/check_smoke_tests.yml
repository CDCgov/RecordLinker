name: check smoke tests

on:
  push:
    branches: [main]
  pull_request:
    branches: [main]

jobs:
  smoke_tests:
    runs-on: ubuntu-latest

    strategy:
      matrix:
        database: [postgres, sqlite, mysql, sqlserver]

    services:
      postgres:
        image: ghcr.io/cdcgov/recordlinker/postgres:17
        ports:
          - 5432:5432
        env:
          POSTGRES_PASSWORD: pw

      mysql:
        image: ghcr.io/cdcgov/recordlinker/mysql:8
        ports:
          - 3306:3306
        env:
          MYSQL_ROOT_PASSWORD: pw

      sqlserver:
        image: ghcr.io/cdcgov/recordlinker/mssql:2022-latest
        ports:
          - 1433:1433
        env:
          ACCEPT_EULA: Y
          SA_PASSWORD: "YourStrong!Passw0rd"

    steps:
      - name: Check out repository
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Build RecordLinker Docker Image
        run: |
          docker build -t rl-service-image .

      - name: Start RecordLinker Service and Run Smoke Tests
        run: |
          if [[ "${{ matrix.database }}" == "postgres" ]]; then
            export DB_URI="postgresql+psycopg2://postgres:pw@localhost:5432/postgres"
          elif [[ "${{ matrix.database }}" == "sqlite" ]]; then
            export DB_URI="sqlite:///testdb.sqlite3"
          elif [[ "${{ matrix.database }}" == "mysql" ]]; then
            export DB_URI="mysql+pymysql://root:pw@localhost:3306/mysql"
          elif [[ "${{ matrix.database }}" == "sqlserver" ]]; then
            export DB_URI="mssql+pyodbc://sa:YourStrong!Passw0rd@localhost:1433/master?driver=ODBC+Driver+18+for+SQL+Server&TrustServerCertificate=yes"
            
          fi

          API_ROOT="/api"
          BASE_URL="http://localhost:8080${API_ROOT}"

          # Start Record Linker Service
          docker run -d --name rl-service \
            --network="host" \
            -e DB_URI=$DB_URI \
            -e API_ROOT_PATH=$API_ROOT \
            rl-service-image

          # Wait for the RL Service to be healthy 
          TRIES=5
          COUNT=0
          until curl -s $BASE_URL | grep "OK"; do
            echo "Waiting for RL Service to become healthy... Attempt $((COUNT+1)) of $TRIES"
            sleep 5
            COUNT=$((COUNT+1))
            if [ "$COUNT" -ge "$TRIES" ]; then
              echo "RL Service did not become healthy in time."
              exit 1
            fi
          done

          ./scripts/example_linkage_test.sh "${BASE_URL}"
