name: "release drafter"

on:
  push:
    branches: [main]
  pull_request:
    branches: [main]

jobs:
  update_release:
    runs-on: ubuntu-latest

    steps:
      # Step 1: Checkout the repository
      - name: Checkout code
        uses: actions/checkout@v3
        with:
          fetch-depth: 0 # Fetch all history for tags

      # Step 2: Calculate the next tag name
      - name: Next tag
        id: next_tag
        run: |
          # Get the current two digit year
          year=$(date +"%y")
          # Get the latest tag
          latest_tag=$(git describe --tags --match "v*" --abbrev=0 $(git rev-list --tags --max-count=1) 2>/dev/null || echo "")
          # Count the number of commits on main since the last tag
          commits=$(git rev-list --count $latest_tag..HEAD --)
          # Get latest tag for the current year
          latest_tag_for_year=$(git describe --tags --match "v${year}.*" --abbrev=0 $(git rev-list --tags --max-count=1) 2>/dev/null || echo "")
          # If no tags found for the current year, start from v${year}.0
          if [ -z "$latest_tag_for_year" ]; then
              next_feature_ver="1"
          else
              # Get the latest tag number
              next_feature_ver=$(($(echo $latest_tag_for_year | cut -d '.' -f 2) + 1))
          fi
          echo "Latest tag: $latest_tag"
          echo "LATEST_TAG=$latest_tag" >> $GITHUB_ENV
          echo "Next tag: v${year}.${next_feature_ver}.0-rc.${commits}"
          echo "NEXT_TAG=v${year}.${next_feature_ver}.0-rc.${commits}" >> $GITHUB_ENV

      # Step 2: Get the latest release tag and check for an existing draft release
      - name: Get existing draft release
        id: get_release
        run: |
          # Get existing draft release (if any)
          response=$(curl -s -H "Authorization: token ${{ secrets.GITHUB_TOKEN }}" \
            "https://api.github.com/repos/${{ github.repository }}/releases")

          # Check if there is a draft release
          draft_release=$(echo "$response" | jq '.[] | select(.draft == true)')
          if [[ -n "$draft_release" ]]; then
            echo "DRAFT_EXISTS=true" >> $GITHUB_ENV
            echo "Draft release found: $(echo $draft_release | jq -r '.tag_name')"
            echo "DRAFT_RELEASE_ID=$(echo $draft_release | jq -r '.id')" >> $GITHUB_ENV
          else
            echo "DRAFT_EXISTS=false" >> $GITHUB_ENV
          fi

      # Step 3: Generate release notes comparing the latest tag and main branch
      - name: Generate release notes
        id: generate_notes
        run: |
          # Generate release notes using the GitHub API
          response=$(curl -s -X POST \
            -H "Authorization: token ${{ secrets.GITHUB_TOKEN }}" \
            -H "Accept: application/vnd.github+json" \
            -d "{\"tag_name\":\"${{ env.NEXT_TAG }}\",\"target_commitish\":\"main\",\"previous_tag_name\":\"${{ env.LATEST_TAG }}\"}" \
            "https://api.github.com/repos/${{ github.repository }}/releases/generate-notes")

          # Extract the release notes
          release_notes=$(echo "$response" | jq -r '.body')
          echo "Generated release notes: $release_notes"
          # Add the release notes to the GITHUB_ENV variable using printf to preserve newlines
          printf "RELEASE_NOTES<<EOF\n%s\nEOF" "$release_notes" >> $GITHUB_ENV

      # Step 4: Update or create the draft release
      - name: Create or update draft release
        run: |
          if [ "${{ steps.get_release.outputs.draft_exists }}" == "true" ]; then
            # Update the existing draft release
            echo curl -s -X PATCH \
              -H "Authorization: token ${{ secrets.GITHUB_TOKEN }}" \
              -H "Accept: application/vnd.github+json" \
              -d "{\"tag_name\": \"${{ env.NEXT_TAG }}\", \"name\": \"${{ env.NEXT_TAG }}\", \"body\": \"${{ env.RELEASE_NOTES }}\", \"draft\": true}" \
              "https://api.github.com/repos/${{ github.repository }}/releases/${{ env.DRAFT_RELEASE_ID }}"
          else
            # Create a new draft release
            echo curl -s -X POST \
              -H "Authorization: token ${{ secrets.GITHUB_TOKEN }}" \
              -H "Accept: application/vnd.github+json" \
              -d "{\"tag_name\": \"${{ env.NEXT_TAG }}\", \"target_commitish\": \"main\", \"name\": \"${{ env.NEXT_TAG }}\", \"body\": \"${{ env.RELEASE_NOTES }}\", \"draft\": true}" \
              "https://api.github.com/repos/${{ github.repository }}/releases"
          fi
